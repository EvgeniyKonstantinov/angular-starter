{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1e4d379814e998ba784513d6a2cf232e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-button styleType=\"raised\">Test</app-button>\n<app-button styleType=\"raised\"><app-icon iconName=\"add\"></app-icon></app-button>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a5dc93c1b05ced492203b7625a936661",
            "file": "src/app/modules/ui/component/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "\"accent\" | \"warn\" | \"primary\" | \"\""
                },
                {
                    "name": "styleType",
                    "defaultValue": "'basic'",
                    "line": 11,
                    "type": "\"basic\" | \"raised\" | \"stroked\" | \"flat\" | \"icon\" | \"fab\" | \"mini_fab\""
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  @Input() public color: 'accent' | 'warn' | 'primary' | '' = '';\n  @Input() public styleType: 'basic' | 'raised' | 'stroked' | 'flat' | 'icon' | 'fab' | 'mini_fab' = 'basic';\n\n  @Output() public btnClick = new EventEmitter<void>();\n\n  public onClick(): void {\n    this.btnClick.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container [ngSwitch]=\"styleType\">\n  <button *ngSwitchCase=\"'raised'\" mat-raised-button [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n  <button *ngSwitchCase=\"'stroked'\" mat-stroked-button [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n  <button *ngSwitchCase=\"'flat'\" mat-flat-button [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n  <button *ngSwitchCase=\"'icon'\" mat-icon-button [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n  <button *ngSwitchCase=\"'fab'\" mat-fab [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n  <button *ngSwitchCase=\"'mini_fab'\" mat-mini-fab [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n\n  <button *ngSwitchDefault mat-button [color]=\"color\" (click)=\"onClick()\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </button>\n\n</ng-container>\n\n<ng-template #contentTpl><ng-content></ng-content></ng-template>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-98ba45bb2ec5702aa580d2e217a079a5",
            "file": "src/app/modules/ui/component/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "\"primary\" | \"accent\" | \"warn\" | \"\""
                },
                {
                    "name": "height",
                    "line": 14,
                    "type": "string | undefined"
                },
                {
                    "name": "iconName",
                    "line": 11,
                    "type": "string | undefined"
                },
                {
                    "name": "width",
                    "line": 13,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "applyHostClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.accent",
                    "line": 17,
                    "type": "boolean | undefined"
                },
                {
                    "name": "class.primary",
                    "line": 16,
                    "type": "boolean | undefined"
                },
                {
                    "name": "class.warn",
                    "line": 18,
                    "type": "boolean | undefined"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input, HostBinding, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconComponent implements OnChanges {\n  @Input() public color: 'primary' | 'accent' | 'warn' | '' = '';\n  @Input() public iconName: string | undefined;\n\n  @HostBinding('style.width') @Input() private width: string | undefined;\n  @HostBinding('style.height') @Input() private height: string | undefined;\n\n  @HostBinding('class.primary') private colorPrimary: boolean | undefined;\n  @HostBinding('class.accent') private colorAccent: boolean | undefined;\n  @HostBinding('class.warn') private colorWarn: boolean | undefined;\n\n  public ngOnChanges(): void {\n    this.applyHostClasses();\n  }\n\n  private applyHostClasses(): void {\n    this.colorPrimary = this.color === 'primary';\n    this.colorAccent = this.color === 'accent';\n    this.colorWarn = this.color === 'warn';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-flex;\n  width: 1.5rem;\n  height: 1.5rem;\n\n  .mat-icon {\n    height: inherit;\n    width: inherit;\n    color: inherit;\n    display: inherit !important;\n    margin: 0 !important;\n  }\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-icon [color]=\"color\" [svgIcon]=\"iconName\"></mat-icon>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Icon.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/ui/ui.module.ts",
                "type": "[]",
                "defaultValue": "[ButtonComponent, IconComponent]"
            },
            {
                "name": "configureTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "test-config.helper.ts",
                "type": "",
                "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "Icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "iconsTemplate.bind({})"
            },
            {
                "name": "iconsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args) => ({\n  props: {\n    content: text('Text', 'Test'),\n    styleType: args.styleType,\n    color: args.color,\n  },\n  template: '<app-button [color]=\"color\" [styleType]=\"styleType\"><app-icon iconName=\"add\"></app-icon></app-button>',\n})"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setup-jest.ts",
                "type": "",
                "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/ui/material.module.ts",
                "type": "[]",
                "defaultValue": "[MatButtonModule, MatIconModule, HttpClientModule]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args) => ({\n  props: {\n    content: text('Text', 'Test'),\n    styleType: args.styleType,\n    color: args.color,\n  },\n  template: '<app-button [color]=\"color\" [styleType]=\"styleType\">{{content}}</app-button>',\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Icon.stories.ts",
                "type": "Story<IconComponent>",
                "defaultValue": "(args) => ({\n  props: {\n    color: args.color,\n    iconName: args.iconName,\n  },\n  template: '<app-icon [iconName]=\"iconName\" [color]=\"color\"></app-icon>',\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "CompilerOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "test-config.helper.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ConfigureFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "test-config.helper.ts",
                "description": "",
                "kind": 162
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "iconsTemplate.bind({})"
                },
                {
                    "name": "iconsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args) => ({\n  props: {\n    content: text('Text', 'Test'),\n    styleType: args.styleType,\n    color: args.color,\n  },\n  template: '<app-button [color]=\"color\" [styleType]=\"styleType\"><app-icon iconName=\"add\"></app-icon></app-button>',\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args) => ({\n  props: {\n    content: text('Text', 'Test'),\n    styleType: args.styleType,\n    color: args.color,\n  },\n  template: '<app-button [color]=\"color\" [styleType]=\"styleType\">{{content}}</app-button>',\n})"
                }
            ],
            "src/stories/Icon.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Icon.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Icon.stories.ts",
                    "type": "Story<IconComponent>",
                    "defaultValue": "(args) => ({\n  props: {\n    color: args.color,\n    iconName: args.iconName,\n  },\n  template: '<app-icon [iconName]=\"iconName\" [color]=\"color\"></app-icon>',\n})"
                }
            ],
            "src/app/modules/ui/ui.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/ui/ui.module.ts",
                    "type": "[]",
                    "defaultValue": "[ButtonComponent, IconComponent]"
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "configureTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "test-config.helper.ts",
                    "type": "",
                    "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "setup-jest.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setup-jest.ts",
                    "type": "",
                    "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ],
            "src/app/modules/ui/material.module.ts": [
                {
                    "name": "MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/ui/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[MatButtonModule, MatIconModule, HttpClientModule]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "test-config.helper.ts": [
                {
                    "name": "CompilerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "test-config.helper.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "ConfigureFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "test-config.helper.ts",
                    "description": "",
                    "kind": 162
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui/component/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui/component/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui/ui.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconsTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "test-config.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configureTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}